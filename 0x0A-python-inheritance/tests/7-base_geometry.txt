Test print_sorted
=================

import
======

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

tests
=====
>>> bg = BaseGeometry()
>>> bg.integer_validator("test", 5)  # Valid integer input
>>> bg.integer_validator("test", 100)  # Valid positive integer input
>>> bg.integer_validator("test", 0)  # Valid integer input (edge case)
Traceback (most recent call last):
    ...
ValueError: test must be greater than 0
>>> bg.integer_validator("test", -1)  # Valid negative integer input (edge case)
Traceback (most recent call last):
    ...
ValueError: test must be greater than 0

>>> bg.integer_validator("test", "string")  # Value is a string, should raise TypeError
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", None)  # Value is None, should raise TypeError
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", 1.5)  # Value is a float, should raise TypeError
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", -1.5)  # Value is a negative float, should raise TypeError
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", 0.1)  # Value is a float (should raise TypeError)
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", 0.0)  # Value is a float (should raise TypeError)
Traceback (most recent call last):
    ...
TypeError: test must be an integer

>>> bg.integer_validator("test", -0.1)  # Value is a negative float (should raise TypeError)
Traceback (most recent call last):
    ...
TypeError: test must be an integer
>>> bg.integer_validator("test", 2147483647)

>>> bg.integer_validator("test", -2147483648)
Traceback (most recent call last):
    ...
ValueError: test must be greater than 0
